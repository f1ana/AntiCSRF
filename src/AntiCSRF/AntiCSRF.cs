using AntiCSRF.Config;

namespace AntiCSRF {
    /// <summary>
    /// Class used to create AntiCSRF instances
    /// </summary>
    public class AntiCSRF {
        private readonly AntiCSRFConfig _config;

        /// <summary>
        /// Constructor with default configuration
        /// </summary>
        public AntiCSRF() {
            _config = new AntiCSRFConfig();
        }

        /// <summary>
        /// Constructor with custom configuration
        /// </summary>
        /// <param name="config">AntiCSRF configuration</param>
        public AntiCSRF(AntiCSRFConfig config) {
            _config = config;
        }

        /// <summary>
        /// Generate a token using the default AntiCSRF configuration
        /// </summary>
        /// <param name="userId">UserId or other unique key</param>
        /// <param name="key">Key to use in the hash algorithm</param>
        /// <returns>AntiCSRF token</returns>
        public string GenerateToken(string userId, string key) {
            return AntiCSRFToken.GenerateToken(userId, key, _config);
        }

        /// <summary>
        /// Validates a token previously generated by the AntiCSRF library
        /// </summary>
        /// <param name="token">AntiCSRF token</param>
        /// <param name="key">Key to use in the hash algorithm</param>
        /// <param name="userId">UserId or other unique key</param>
        /// <returns>True indicating a valid, non-expired token.  False otherwise</returns>
        public bool ValidateToken(string token, string key, string userId) {
            return AntiCSRFToken.ValidateToken(token, key, userId, _config);
        }
    }
}